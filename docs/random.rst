
.. _python3-random:

Python 3: Генерация случайных чисел (модуль random)
===================================================

.. epigraph::

   *«Генерация случайных чисел слишком важна, чтобы оставлять её на волю случая»*

   -- |nbsp| Роберт Кавью

.. |nbsp| unicode:: U+00A0


Python порождает случайные числа на основе формулы, так что они не на самом деле случайные, а, как говорят, псевдослучайные [#]_. Этот способ удобен для большинства приложений (кроме онлайновых казино) [#]_.

.. [#] `Википедия: Генератор псевдослучайных чисел <https://ru.wikipedia.org/wiki/%D0%93%D0%B5%D0%BD%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80_%D0%BF%D1%81%D0%B5%D0%B2%D0%B4%D0%BE%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B9%D0%BD%D1%8B%D1%85_%D1%87%D0%B8%D1%81%D0%B5%D0%BB>`_

.. [#] Доусон М. Программируем на Python. — СПб.: Питер, 2014. — 416 с.: ил. — 3-е изд

Модуль random позволяет генерировать случайные числа. Прежде чем использовать модуль, необходимо подключить его с помощью инструкции:

.. code-block:: python

    import random


random.random
-------------

``random.random()`` — возвращает псевдослучайное число от 0.0 до 1.0

.. code-block:: python

   random.random()
   0.07500815468466127

random.seed
-----------

``random.seed(<Параметр>)`` — настраивает генератор случайных чисел на новую последовательность. По умолчанию используется системное время. Если задать одинаковое значение параметра, то генерируются одинаковые последовательности:

.. code-block:: python

   random.seed(20)
   random.random()
   0.9056396761745207

   random.random()
   0.6862541570267026

   random.seed(20)
   random.random()
   0.9056396761745207

   random.random()
   0.7665092563626442



random.uniform
---------------

``random.uniform(<Начало>, <Конец>)`` — возвращает псевдослучайное вещественное число в диапазоне от ``<Начало>`` до ``<Конец>``:

.. code-block:: python

   random.uniform(0, 20)
   15.330185127252884
   
   random.uniform(0, 20)
   18.092324756265473


random.randint
--------------

``random.randint(<Начало>, <Конец>)`` — возвращает псевдослучайное целое число в диапазоне от ``<Начало>`` до ``<Конец>``:

.. code-block:: python

    random.randint(1,27)
    9
    random.randint(1,27)
    22

random.choince
--------------

``random.choince(<Последовательность>)`` — возвращает случайный элемент из любой последовательности (строки, списка, кортежа):

.. code-block:: python

    random.choice('Chewbacca')
    'h'
    random.choice([1,2,'a','b'])
    2
    random.choice([1,2,'a','b'])
    'a'

random.randrange
-----------------

``random.randrange(<Начало>, <Конец>, <Шаг>)`` — возвращает случайно выбранное число из последовательности.

random.shuffle
--------------

``random.shuffle(<Список>)`` — перемешивает последовательность (изменяется сама последовательность). Поэтому функция не работает для неизменяемых объектов.

.. code-block:: python

    List = [1,2,3,4,5,6,7,8,9]
    List
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
    random.shuffle(List)
    List
    [6, 7, 1, 9, 5, 8, 3, 2, 4]

Вероятностные распределения
---------------------------

``random.triangular(low, high, mode)`` — случайное число с плавающей точкой, ``low ≤ N ≤ high``. ``Mode`` - распределение.

``random.betavariate(alpha, beta)`` — бета-распределение. ``alpha>0``, ``beta>0``. Возвращает от 0 до 1.

``random.expovariate(lambd)`` — экспоненциальное распределение. ``lambd`` равен 1/среднее желаемое. ``Lambd`` должен быть отличным от нуля. Возвращаемые значения от 0 до плюс бесконечности, если ``lambd`` положительно, и от минус бесконечности до 0, если lambd отрицательный.

``random.gammavariate(alpha, beta)`` — гамма-распределение. Условия на параметры ``alpha>0`` и ``beta>0``.

random.gauss(значение, стандартное отклонение) — распределение Гаусса.

``random.lognormvariate(mu, sigma)`` — логарифм нормального распределения. Если взять натуральный логарифм этого распределения, то вы получите нормальное распределение со средним ``mu`` и стандартным отклонением ``sigma``. ``mu`` может иметь любое значение, и ``sigma`` должна быть больше нуля.

``random.normalvariate(mu, sigma)`` — нормальное распределение. ``mu`` — среднее значение, ``sigma`` — стандартное отклонение.

``random.vonmisesvariate(mu, kappa)`` — ``mu`` — средний угол, выраженный в радианах от 0 до 2π, и ``kappa`` — параметр концентрации, который должен быть больше или равен нулю. Если каппа равна нулю, это распределение сводится к случайному углу в диапазоне от 0 до 2π.

``random.paretovariate(alpha)`` — распределение Парето.

``random.weibullvariate(alpha, beta)`` — распределение Вейбулла.

Примеры
-------

Генерация произвольного пароля
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Хороший пароль должен быть произвольным и состоять минимум из 6 символов, в нём должны быть цифры, строчные и прописные буквы. Приготовить такой пароль можно по следующему рецепту:

.. code-block:: python

    import random
    # Щепотка цифр
    str1 = '123456789'
    # Щепотка строчных букв
    str2 = 'qwertyuiopasdfghjklzxcvbnm'
    # Щепотка прописных букв. Готовится преобразованием str2
    в верхний     регистр.
    str3 = str2.upper()
    print(str3)
    # Выведет: 'QWERTYUIOPASDFGHJKLZXCVBNM'

    # Соединяем все строки в одну
    str4 = str1+str2+str3
    print(str4)
    # Выведет: '123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'

    # Преобразуем получившуюся строку в список
    ls = list(str4)
    # Тщательно перемешиваем список
    random.shuffle(ls)
    # Извлекаем из списка 12 произвольных значений
    psw = ''.join([random.choice(ls) for x in range(12)])
    # Пароль готов
    print(psw)
    # Выведет: '1t9G4YPsQ5L7'

Этот же скрипт можно записать всего в две строки:

.. code-block:: python

    import random
    print(''.join([random.choice(list('123456789qwertyuiopasdfghjklzxc
    vbnmQWERTYUIOPASDFGHJKLZXCVBNM')) for x in range(12)]))

Данная команда является краткой записью цикла for, вместо неё можно было написать так:

.. code-block:: python

    import random
    psw = '' # предварительно создаем переменную psw
    for x in range(12):
        psw = psw + random.choice(list('123456789qwertyuiopasdfgh
    jklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))

    print(psw)
    # Выведет: Ci7nU6343YGZ

Данный цикл повторяется 12 раз и на каждом круге добавляет к строке psw произвольно выбранный элемент из списка.

Ссылки
------

* `Официальная документация по модулю random <https://docs.python.org/3.0/library/random.html>`_ (англ.)
* `Python 3 для начинающих: Модуль random <http://pythonworld.ru/moduli/modul-random.html>`_
* `Модуль random — генерация случайных чисел <http://python-3.ru/page/python-random>`_
* `Безопасность случайных чисел в Python <http://habrahabr.ru/company/pt/blog/156133/>`_
